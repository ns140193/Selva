/*
 * Copyright 2014 - 2017 Cognizant Technology Solutions
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.cognizant.cognizantits.ide.main.shr.image;

import com.cognizant.cognizantits.datalib.or.common.ObjectGroup;
import com.cognizant.cognizantits.datalib.or.image.ImageOR;
import com.cognizant.cognizantits.datalib.or.image.ImageORObject;
import com.cognizant.cognizantits.datalib.or.image.ImageORPage;
import com.cognizant.cognizantits.ide.main.mainui.AppMainFrame;
import com.cognizant.cognizantits.ide.main.shr.image.crop.CropUIController;
import com.cognizant.cognizantits.ide.util.Notification;
import java.awt.CardLayout;
import java.awt.Image;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.image.RenderedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;

/**
 *
 * 
 */
public class ImageSpy extends javax.swing.JFrame {

    private final CardLayout layout;

    private ImageOR imageOR;

    private final CropUIController cropCtrl;

    private final AppMainFrame sMainFrame;

    /**
     * Creates new form ImageSpy
     *
     * @param sMainFrame
     */
    public ImageSpy(AppMainFrame sMainFrame) {
        SikuliSettings.init();
        initComponents();
        this.sMainFrame = sMainFrame;
        layout = (CardLayout) cardPanel.getLayout();
        cropCtrl = CropUIController.getInstance();
        initView();
    }

    private void initView() {
        setIconImage(new ImageIcon(getClass().getResource("/ui/resources/imageSpy/imgSpy.png")).getImage());
        cropCtrl.setFrame(this);
        cropCtrl.setRightClickDisArm(true);
        cropCtrl.setOnCrop(onCropAction());
        cropCtrl.setOnHide(onHideAction());
        hidePanel();
    }

    private Action onCropAction() {
        return new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                cropImageLabel.setIcon(new ImageIcon((Image) this.getValue("img")));
            }
        };
    }

    private Action onHideAction() {
        return new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                crop.setSelected(false);
            }
        };
    }

    public void load() {
        imageOR = sMainFrame.getProject().getObjectRepository().getImageOR();
    }

    public void showImageSpy() {
        cropCtrl.setFrame(this);
        hidePanel();
        setLocationRelativeTo(null);
        setLocation(getLocation().x, 0);
        setVisible(true);
        pageCombo.removeAllItems();
        groupCombo.removeAllItems();
        objectCombo.removeAllItems();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        compToolbar = new javax.swing.JToolBar();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
        crop = new javax.swing.JToggleButton();
        loadFromClipBoard = new javax.swing.JToggleButton();
        addNewPage = new javax.swing.JToggleButton();
        addAsObject = new javax.swing.JToggleButton();
        showImage = new javax.swing.JToggleButton();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
        cardPanel = new javax.swing.JPanel();
        imagePanel = new javax.swing.JPanel();
        imgScroll = new javax.swing.JScrollPane();
        cropImageLabel = new javax.swing.JLabel();
        addPage = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        pageAddButton = new javax.swing.JButton();
        pageAloneCombo = new javax.swing.JComboBox<>();
        addObject = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        pageCombo = new javax.swing.JComboBox<>();
        groupCombo = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        objectCombo = new javax.swing.JComboBox<>();
        takeReference = new javax.swing.JCheckBox();
        addObjectButton = new javax.swing.JButton();
        isObjectGroup = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Image Spy");
        setAlwaysOnTop(true);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentMoved(java.awt.event.ComponentEvent evt) {
                formComponentMoved(evt);
            }
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
                formWindowLostFocus(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        compToolbar.setFloatable(false);
        compToolbar.setRollover(true);
        compToolbar.add(filler1);

        crop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/resources/imageSpy/crop.png"))); // NOI18N
        crop.setToolTipText("Crop");
        crop.setFocusable(false);
        crop.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        crop.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        crop.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cropItemStateChanged(evt);
            }
        });
        compToolbar.add(crop);

        loadFromClipBoard.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/resources/imageSpy/fromCB.png"))); // NOI18N
        loadFromClipBoard.setToolTipText("Crop from Clipboard");
        loadFromClipBoard.setFocusable(false);
        loadFromClipBoard.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        loadFromClipBoard.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        loadFromClipBoard.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                loadFromClipBoardItemStateChanged(evt);
            }
        });
        compToolbar.add(loadFromClipBoard);

        addNewPage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/resources/imageSpy/addpage.png"))); // NOI18N
        addNewPage.setToolTipText("Add Page");
        addNewPage.setFocusable(false);
        addNewPage.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addNewPage.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        addNewPage.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                addNewPageItemStateChanged(evt);
            }
        });
        compToolbar.add(addNewPage);

        addAsObject.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/resources/imageSpy/addObject.png"))); // NOI18N
        addAsObject.setToolTipText("Add Object");
        addAsObject.setFocusable(false);
        addAsObject.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addAsObject.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        addAsObject.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                addAsObjectItemStateChanged(evt);
            }
        });
        compToolbar.add(addAsObject);

        showImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/resources/imageSpy/down.png"))); // NOI18N
        showImage.setToolTipText("Show/Hide Cropped Image");
        showImage.setFocusable(false);
        showImage.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        showImage.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        showImage.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                showImageItemStateChanged(evt);
            }
        });
        compToolbar.add(showImage);
        compToolbar.add(filler2);

        getContentPane().add(compToolbar, java.awt.BorderLayout.NORTH);

        cardPanel.setBackground(getBackground());
        cardPanel.setLayout(new java.awt.CardLayout());

        imagePanel.setLayout(new java.awt.BorderLayout());

        imgScroll.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.black, null));

        cropImageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cropImageLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        imgScroll.setViewportView(cropImageLabel);

        imagePanel.add(imgScroll, java.awt.BorderLayout.CENTER);

        cardPanel.add(imagePanel, "image");

        jLabel1.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jLabel1.setText("Page Name");

        pageAddButton.setText("Add/Update");
        pageAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pageAddButtonActionPerformed(evt);
            }
        });

        pageAloneCombo.setEditable(true);
        pageAloneCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout addPageLayout = new javax.swing.GroupLayout(addPage);
        addPage.setLayout(addPageLayout);
        addPageLayout.setHorizontalGroup(
            addPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addPageLayout.createSequentialGroup()
                .addGroup(addPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addPageLayout.createSequentialGroup()
                        .addGroup(addPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(addPageLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1))
                            .addGroup(addPageLayout.createSequentialGroup()
                                .addGap(65, 65, 65)
                                .addComponent(pageAddButton)))
                        .addGap(0, 72, Short.MAX_VALUE))
                    .addComponent(pageAloneCombo, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        addPageLayout.setVerticalGroup(
            addPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addPageLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pageAloneCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pageAddButton)
                .addContainerGap(166, Short.MAX_VALUE))
        );

        cardPanel.add(addPage, "page");

        jLabel2.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jLabel2.setText("Page");

        pageCombo.setEditable(true);
        pageCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                pageComboItemStateChanged(evt);
            }
        });

        groupCombo.setEditable(true);
        groupCombo.setEnabled(false);
        groupCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                groupComboItemStateChanged(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jLabel4.setText("ObjectName");

        objectCombo.setEditable(true);

        takeReference.setText("Take Reference");

        addObjectButton.setText("Add/Update");
        addObjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addObjectButtonActionPerformed(evt);
            }
        });

        isObjectGroup.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        isObjectGroup.setText("ObjectGroup");
        isObjectGroup.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        isObjectGroup.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                isObjectGroupItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout addObjectLayout = new javax.swing.GroupLayout(addObject);
        addObject.setLayout(addObjectLayout);
        addObjectLayout.setHorizontalGroup(
            addObjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addObjectLayout.createSequentialGroup()
                .addGroup(addObjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addObjectLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(addObjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(takeReference)
                            .addGroup(addObjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel4)
                                .addComponent(jLabel2)
                                .addComponent(pageCombo, 0, 197, Short.MAX_VALUE)
                                .addComponent(groupCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(objectCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(isObjectGroup)))
                    .addGroup(addObjectLayout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(addObjectButton)))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        addObjectLayout.setVerticalGroup(
            addObjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addObjectLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pageCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(isObjectGroup)
                .addGap(10, 10, 10)
                .addComponent(groupCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(objectCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(takeReference)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addObjectButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        cardPanel.add(addObject, "object");

        getContentPane().add(cardPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pageAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pageAddButtonActionPerformed
        addPage();
    }//GEN-LAST:event_pageAddButtonActionPerformed

    private void addObjectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addObjectButtonActionPerformed
        addObject();
    }//GEN-LAST:event_addObjectButtonActionPerformed

    private void pageComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_pageComboItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            loadGroupsForPage(evt.getItem());
        }
    }//GEN-LAST:event_pageComboItemStateChanged

    private void groupComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_groupComboItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            loadObjectsForGroup(evt.getItem());
        }
    }//GEN-LAST:event_groupComboItemStateChanged

    private void showImageItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_showImageItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            showPanel();
            layout.show(cardPanel, "image");
            setSize(getSize().width, 300);
        } else {
            hidePanel();
            cropCtrl.refresh();
        }
    }//GEN-LAST:event_showImageItemStateChanged

    private void cropItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cropItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            setVisible(false);
            hidePanel();
            sleepNow();
            cropCtrl.doCrop();
            setVisible(true);
        } else {
            cropCtrl.stop();
        }
    }//GEN-LAST:event_cropItemStateChanged

    private void loadFromClipBoardItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_loadFromClipBoardItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            hidePanel();
            if (!cropCtrl.doCBCrop()) {
                Notification.show("Clipboard is Empty");
                loadFromClipBoard.setSelected(false);
            }
        } else {
            cropCtrl.stop();
        }
    }//GEN-LAST:event_loadFromClipBoardItemStateChanged

    private void addNewPageItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_addNewPageItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            showPanel();
            showAddPageView();
        } else {
            hidePanel();
        }
        cropCtrl.refresh();
    }//GEN-LAST:event_addNewPageItemStateChanged

    private void addAsObjectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_addAsObjectItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            showPanel();
            showAddObjectView();
        } else {
            hidePanel();
        }
        cropCtrl.refresh();
    }//GEN-LAST:event_addAsObjectItemStateChanged

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        crop.setSelected(false);
        loadFromClipBoard.setSelected(false);
        addNewPage.setSelected(false);
        addAsObject.setSelected(false);
        showImage.setSelected(false);
        sMainFrame.getTestDesign().getObjectRepo().getImageOR().getObjectTree().reload();
    }//GEN-LAST:event_formWindowClosing

    private void isObjectGroupItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_isObjectGroupItemStateChanged
        groupCombo.setEnabled(evt.getStateChange() == ItemEvent.SELECTED);
        loadGroupsForPage(pageCombo.getSelectedItem());
    }//GEN-LAST:event_isObjectGroupItemStateChanged

    private void formComponentMoved(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentMoved
        if (cropCtrl != null) {
            cropCtrl.refresh();
        }
    }//GEN-LAST:event_formComponentMoved

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        if (cropCtrl != null) {
            cropCtrl.refresh();
        }
    }//GEN-LAST:event_formComponentResized

    private void formWindowLostFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowLostFocus
        cropCtrl.refresh();
    }//GEN-LAST:event_formWindowLostFocus

    private void hidePanel() {
        cardPanel.setVisible(false);
        setSize(getSize().width, 70);
    }

    private void showPanel() {
        cardPanel.setVisible(true);
    }

    private void showAddPageView() {
        layout.show(cardPanel, "page");
        pageAloneCombo.setModel(new DefaultComboBoxModel(imageOR.getPages().toArray()));
        setSize(getSize().width, 200);
    }

    private void addPage() {
        ImageORPage page = getAResolvedPage();
        if (page == null) {
            Notification.show("Invalid Page Name");
        } else {
            savePage(page);
            addNewPage.setSelected(false);
        }
    }

    private ImageORPage getAResolvedPage() {
        ImageORPage page;
        if (pageAloneCombo.getSelectedItem() instanceof ImageORPage) {
            page = (ImageORPage) pageAloneCombo.getSelectedItem();
        } else {
            page = imageOR.getPageByName(pageAloneCombo.getSelectedItem().toString());
        }
        if (page == null) {
            if (!pageAloneCombo.getSelectedItem().toString().trim().isEmpty()) {
                page = imageOR.addPage(pageAloneCombo.getSelectedItem().toString());
                savePage(page);
            }
        }
        return page;
    }

    private void loadGroupsForPage(Object obj) {
        groupCombo.removeAllItems();
        objectCombo.removeAllItems();
        if (obj != null) {
            if (obj instanceof ImageORPage) {
                ImageORPage page = (ImageORPage) obj;
                DefaultComboBoxModel objGroupModel = new DefaultComboBoxModel(page.getObjectGroups().toArray());
                if (isObjectGroup.isSelected()) {
                    groupCombo.setModel(objGroupModel);
                    groupCombo.setSelectedIndex(-1);
                    if (groupCombo.getItemCount() > 0) {
                        groupCombo.setSelectedIndex(groupCombo.getItemCount() - 1);
                    }
                } else {
                    objectCombo.setModel(objGroupModel);
                }
            }
        }
    }

    private void loadObjectsForGroup(Object obj) {
        if (obj instanceof ObjectGroup) {
            ObjectGroup<ImageORObject> group = (ObjectGroup<ImageORObject>) obj;
            objectCombo.setModel(new DefaultComboBoxModel(group.getObjects().toArray()));
            if (objectCombo.getItemCount() > 0) {
                objectCombo.setSelectedIndex(objectCombo.getItemCount() - 1);
            }
        } else {
            objectCombo.removeAllItems();
        }
    }

    private void showAddObjectView() {
        if (cropCtrl.getCroppedImage() != null) {
            layout.show(cardPanel, "object");
            pageCombo.setModel(new DefaultComboBoxModel(imageOR.getPages().toArray()));
            if (pageCombo.getItemCount() > 0) {
                pageCombo.setSelectedIndex(pageCombo.getItemCount() - 1);
                if (pageCombo.getSelectedIndex() != -1) {
                    loadGroupsForPage(pageCombo.getSelectedItem());
                }
                if (groupCombo.getSelectedIndex() != -1) {
                    loadObjectsForGroup(groupCombo.getSelectedItem());
                }
            }
            setSize(getSize().width, 350);
        } else {
            Notification.show("No Object has been cropped");
            addAsObject.setSelected(false);
        }
    }

    private void addObject() {
        ImageORPage page = getResolvedPage();
        if (page != null) {
            ObjectGroup<ImageORObject> group = getResolvedGroup(page);
            ImageORObject object;
            if (group != null) {
                object = getResolvedObject(group);
            } else {
                object = getResolvedObject(page);
            }
            if (saveObject(object)) {
                addAsObject.setSelected(false);
            } else {
                Notification.show("Couldn't add object due to invalid details");
            }
        }
    }

    private ImageORPage getResolvedPage() {
        ImageORPage page = null;
        if (pageCombo.getSelectedItem() != null) {
            if (pageCombo.getSelectedItem() instanceof ImageORPage) {
                page = (ImageORPage) pageCombo.getSelectedItem();
            } else {
                page = imageOR.getPageByName(pageCombo.getSelectedItem().toString());
            }
            if (page == null) {
                if (!pageCombo.getSelectedItem().toString().trim().isEmpty()) {
                    page = imageOR.addPage(pageCombo.getSelectedItem().toString());
                }
            }
            savePage(page);
        }
        return page;
    }

    private ObjectGroup<ImageORObject> getResolvedGroup(ImageORPage page) {
        ObjectGroup<ImageORObject> group = null;
        if (isObjectGroup.isSelected() && groupCombo.getSelectedItem() != null) {
            if (groupCombo.getSelectedItem() instanceof ObjectGroup) {
                group = (ObjectGroup<ImageORObject>) groupCombo.getSelectedItem();
            } else {
                group = page.getObjectGroupByName(groupCombo.getSelectedItem().toString());
            }
            if (group == null) {
                if (!groupCombo.getSelectedItem().toString().trim().isEmpty()) {
                    group = page.addObjectGroup(groupCombo.getSelectedItem().toString());
                }
            }
        }
        return group;
    }

    private ImageORObject getResolvedObject(ImageORPage page) {
        if (objectCombo.getSelectedItem() != null) {
            String objName = objectCombo.getSelectedItem().toString();
            ImageORObject object = page.addObject(objName);
            if (object == null) {
                object = page.getObjectGroupByName(objName)
                        .getObjectByName(objName);
            }
            return object;
        }
        return null;
    }

    private ImageORObject getResolvedObject(ObjectGroup<ImageORObject> group) {
        ImageORObject object = null;
        if (objectCombo.getSelectedItem() != null) {
            if (objectCombo.getSelectedItem() instanceof ObjectGroup) {
                object = (ImageORObject) objectCombo.getSelectedItem();
            } else {
                object = group.getObjectByName(objectCombo.getSelectedItem().toString());
            }
            if (object == null) {
                object = group.addObject(objectCombo.getSelectedItem().toString());
            }
        }
        return object;
    }

    private void savePage(ImageORPage page) {
        if (page != null) {
            page.setImageLocation(page.getName() + ".png");
            String location = page.getRepLocation() + File.separator + page.getImageLocation();
            if (cropCtrl.getBackGroundImage() == null) {
                crop.setSelected(true);
            }
            if (!takeReference.isSelected()) {
                saveImage(location, cropCtrl.getBackGroundImage());
            }
        }
    }

    private Boolean saveObject(ImageORObject object) {
        if (object != null) {
            object.setOffset(offsetToString(cropCtrl.cropper.offset));
            object.setCoordinates(
                    rectangleToString(cropCtrl.cropper.getSelection()));
            object.setImageLocation(object.getName() + ".png");
            if (takeReference.isSelected()) {
                object.setReferenceImageLocation(object.getName() + "_Ref.png");
                saveImage(object.getRepLocation() + File.separator + object.getReferenceImageLocation(), cropCtrl.getBackGroundImage());
            } else if (object.getReferenceImageLocation().isEmpty()) {
                object.setReferenceImageLocation(object.getPage().getImageLocation());
            }
            String location = object.getRepLocation() + File.separator + object.getImageLocation();
            saveImage(location, cropCtrl.getCroppedImage());
            return true;
        }
        return false;
    }

    private String rectangleToString(Rectangle coordinates) {
        return coordinates.x + "," + coordinates.y + "," + coordinates.width + "," + coordinates.height;
    }

    private String offsetToString(Point offset) {
        return offset.x + "," + offset.y;
    }

    private void saveImage(String path, Image img) {
        try {
            new File(path).getParentFile().mkdirs();
            ImageIO.write((RenderedImage) img, "PNG", new File(path));
        } catch (IOException ex) {
            Logger.getLogger(ImageSpy.class.getName()).log(Level.SEVERE, null, ex);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton addAsObject;
    private javax.swing.JToggleButton addNewPage;
    private javax.swing.JPanel addObject;
    private javax.swing.JButton addObjectButton;
    private javax.swing.JPanel addPage;
    private javax.swing.JPanel cardPanel;
    private javax.swing.JToolBar compToolbar;
    private javax.swing.JToggleButton crop;
    private javax.swing.JLabel cropImageLabel;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.JComboBox<String> groupCombo;
    private javax.swing.JPanel imagePanel;
    private javax.swing.JScrollPane imgScroll;
    private javax.swing.JCheckBox isObjectGroup;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JToggleButton loadFromClipBoard;
    private javax.swing.JComboBox<String> objectCombo;
    private javax.swing.JButton pageAddButton;
    private javax.swing.JComboBox<String> pageAloneCombo;
    private javax.swing.JComboBox<String> pageCombo;
    private javax.swing.JToggleButton showImage;
    private javax.swing.JCheckBox takeReference;
    // End of variables declaration//GEN-END:variables

    private void sleepNow() {
        try {
            Thread.sleep(500);
        } catch (InterruptedException ex) {
            Logger.getLogger(ImageSpy.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
