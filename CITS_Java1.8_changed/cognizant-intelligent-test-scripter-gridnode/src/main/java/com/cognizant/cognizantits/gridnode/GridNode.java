/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.cognizant.cognizantits.gridnode;

import com.cognizant.cognizantits.gridnode.GridController.Browsers;
import com.cognizant.cognizantits.gridnode.GridController.Methods;
import com.cognizant.cognizantits.gridnode.GridController.ParseJSON;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Pattern;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author 589103
 */
public class GridNode extends javax.swing.JFrame {

    private JButton jButton2;
    ParseJSON json = new ParseJSON();
    ArrayList<Browsers> data;
    Methods methods = new Methods();
    String PORT_REGEX = "[0-9]+";
    Pattern PORT_PATTERN = Pattern.compile(PORT_REGEX);

    /**
     * Creates new form GridNode
     */
    public GridNode() {
        setTitle("Grid Node");
        setResizable(false);
        URL imageUrl = GridNode.class.getResource("/ui/favicon.png");
        ImageIcon icon = new ImageIcon(imageUrl);
        setIconImage(icon.getImage());
        data = json.getBrData();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        ipAdd = new javax.swing.JTextField();
        serverP = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        clientP = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        browser = new javax.swing.JTextField();
        maxI = new javax.swing.JTextField();
        jSpinner1 = new javax.swing.JSpinner();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Courier New", 1, 12)); // NOI18N
        jLabel1.setText("Server:");

        ipAdd.addFocusListener(new GridFocus("IP Address"));
        ipAdd.setText("IP Address");
        ipAdd.setForeground(new Color(150, 150, 150));

        serverP.addFocusListener(new GridFocus("Port"));
        serverP.setText("Port");
        serverP.setForeground(new Color(150, 150, 150));

        jLabel2.setFont(new java.awt.Font("Courier New", 1, 12)); // NOI18N
        jLabel2.setText("Client:");

        clientP.addFocusListener(new GridFocus("Port"));
        clientP.setText("Port");
        clientP.setForeground(new Color(150, 150, 150));

        jLabel3.setFont(new java.awt.Font("Courier New", 1, 12)); // NOI18N
        jLabel3.setText("Total Browser Instances:");

        jLabel4.setFont(new java.awt.Font("Courier New", 1, 12)); // NOI18N
        jLabel4.setText("Browsers :");

        jTable1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jTable1.setFont(new java.awt.Font("Courier New", 1, 12)); // NOI18N
        jTable1.setModel(new GridModelData(data));
        jTable1.setRowHeight(28);
        jTable1.setRowMargin(10);
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
        }

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(0, null, 30, 1));

        jButton1.setFont(new java.awt.Font("Courier New", 1, 12)); // NOI18N
        jButton1.setText("Start");
        jButton1.addActionListener((ActionEvent arg0) -> {
            if (validateInput()) {
                json.saveJson(data, ipAdd.getText(), serverP.getText(), Long.parseLong(clientP.getText()), (int) jSpinner1.getValue());
                try {
                    if (methods.isWindows()) {
                        Runtime.getRuntime().exec("cmd /c start init.bat");
                    } else {
                        Runtime.getRuntime().exec("/usr/bin/open -a Terminal init.command");
                    }
                } catch (IOException e) {
                }
            } else {
                JOptionPane.showMessageDialog(this, "Invalid Input", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        });

        browser.addFocusListener(new GridFocus("Browser"));
        browser.setText("Browser");
        browser.setForeground(new Color(150, 150, 150));

        maxI.addFocusListener(new GridFocus("Max Instance"));
        maxI.setText("Max Instance");
        maxI.setForeground(new Color(150, 150, 150));

        jButton2.setFont(new java.awt.Font("Courier New", 1, 12)); // NOI18N
        jButton2.setText("+");
        jButton2.addActionListener((ActionEvent arg0) -> {
            if (!PORT_PATTERN.matcher(maxI.getText()).matches()) {
                JOptionPane.showMessageDialog(this, "Invalid Input", "ERROR", JOptionPane.ERROR_MESSAGE);
                browser.setText("");
                maxI.setText("");
                repaint();
                return;
            }
            data.add(new Browsers(browser.getText(), maxI.getText()));
            jTable1.repaint();
        });
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(43, 43, 43)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                        .addComponent(jLabel1)
                                                                        .addComponent(jLabel2)
                                                                        .addComponent(ipAdd, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                                                                        .addComponent(clientP))
                                                                .addGap(18, 18, 18)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                        .addComponent(serverP)
                                                                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(browser, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(maxI, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jButton2))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(179, 179, 179)
                                                .addComponent(jButton1)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(46, 46, 46)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(serverP)
                                        .addComponent(ipAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(31, 31, 31)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel2)
                                        .addComponent(jLabel3))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(clientP, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(browser, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(maxI, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(34, 34, 34)
                                .addComponent(jButton1)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GridNode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new GridNode().setVisible(true);
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField clientP;
    private javax.swing.JTextField browser;
    private javax.swing.JTextField ipAdd;
    private javax.swing.JTextField serverP;
    private javax.swing.JTextField maxI;

    private boolean validateInput() {
        if (data.isEmpty()) {
            return false;
        }
        String IPV4_REGEX = "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\."
                + "(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\."
                + "(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\."
                + "(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$";

        Pattern IPV4_PATTERN = Pattern.compile(IPV4_REGEX);

        if (ipAdd.getText().trim().isEmpty() || !(IPV4_PATTERN.matcher(ipAdd.getText()).matches() || ipAdd.getText().toLowerCase().equals("localhost"))) {
            return false;
        }
        if (serverP.getText().trim().isEmpty() || !PORT_PATTERN.matcher(serverP.getText()).matches()) {
            return false;
        }
        if (clientP.getText().trim().isEmpty() || !PORT_PATTERN.matcher(clientP.getText()).matches()) {
            return false;
        }
        return !clientP.getText().equals(serverP.getText());
    }

    // End of variables declaration                   
    class GridFocus implements FocusListener {

        String waterMark;

        public GridFocus(String waterMark) {
            this.waterMark = waterMark;
        }

        @Override
        public void focusGained(FocusEvent e) {
            if (e.getSource() instanceof JTextField) {
                JTextField tf = (JTextField) e.getSource();
                if (!tf.getText().isEmpty()) {
                    tf.setText("");
                    tf.setForeground(new Color(50, 50, 50));
                }
            }
        }

        @Override
        public void focusLost(FocusEvent e) {
            if (e.getSource() instanceof JTextField) {
                JTextField tf = (JTextField) e.getSource();
                if (tf.getText().isEmpty()) {
                    tf.setText(waterMark);
                    tf.setForeground(new Color(150, 150, 150));
                }
            }
        }

    }

    class GridModelData extends AbstractTableModel {

        List<Browsers> data = new ArrayList<>();
        String colNames[] = {"Browsers", "Max Instance"};
        Class<?> colClasses[] = {String.class, String.class};

        public GridModelData(ArrayList data) {
            this.data = data;
        }

        @Override
        public int getRowCount() {
            return data.size();
        }

        @Override
        public int getColumnCount() {
            return colNames.length;
        }

        @Override
        public Object getValueAt(int row, int col) {
            if (col == 0) {
                return data.get(row).getBrowser();
            }
            if (col == 1) {
                return data.get(row).getMaxInst();
            }
            return null;
        }

        @Override
        public String getColumnName(int columnIndex) {
            return colNames[columnIndex];
        }

        @Override
        public Class<?> getColumnClass(int columnIndex) {
            return colClasses[columnIndex];
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return true;
        }

        @Override
        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
            if (columnIndex == 0) {
                data.get(rowIndex).setBrowser((String) aValue);
            }
            if (columnIndex == 1) {
                data.get(rowIndex).setMaxInst((String) aValue);
            }
            fireTableCellUpdated(rowIndex, columnIndex);
        }

    }
}
