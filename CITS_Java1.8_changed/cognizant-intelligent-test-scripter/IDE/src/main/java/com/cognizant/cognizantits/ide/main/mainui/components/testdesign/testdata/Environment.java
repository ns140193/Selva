/*
 * Copyright 2014 - 2017 Cognizant Technology Solutions
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.cognizant.cognizantits.ide.main.mainui.components.testdesign.testdata;

import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;

/**
 *
 * 
 */
public class Environment extends javax.swing.JPanel {

    TestDataComponent tdProxy;

    /**
     * Creates new form Environment
     *
     * @param tdProxy
     */
    public Environment(TestDataComponent tdProxy) {
        this.tdProxy = tdProxy;
        initComponents();
        testDataList.setModel(new DefaultListModel());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        envName = new javax.swing.JTextField();
        copyFromOthers = new javax.swing.JCheckBox();
        environments = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        testDataList = new javax.swing.JList();
        createEnv = new javax.swing.JButton();
        copyGlobalData = new javax.swing.JCheckBox();

        envName.setText("New Environment");
        envName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                envNameActionPerformed(evt);
            }
        });

        copyFromOthers.setText("Copy data from other Environments");
        copyFromOthers.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                copyFromOthersItemStateChanged(evt);
            }
        });

        environments.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        environments.setEnabled(false);
        environments.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                environmentsItemStateChanged(evt);
            }
        });

        testDataList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        testDataList.setEnabled(false);
        jScrollPane1.setViewportView(testDataList);

        createEnv.setText("Create");
        createEnv.setActionCommand("CreateEnvironment");
        createEnv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createEnvActionPerformed(evt);
            }
        });

        copyGlobalData.setText("Copy Global Data");
        copyGlobalData.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(environments, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(envName, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(copyFromOthers)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(createEnv))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(copyGlobalData)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(envName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(createEnv)
                    .addComponent(copyFromOthers))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(environments, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(copyGlobalData)
                .addGap(5, 5, 5)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void envNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_envNameActionPerformed
        createEnv.doClick();
    }//GEN-LAST:event_envNameActionPerformed

    private void createEnvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createEnvActionPerformed
        createNewEnvironment();
    }//GEN-LAST:event_createEnvActionPerformed

    private void copyFromOthersItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_copyFromOthersItemStateChanged
        environments.setEnabled(copyFromOthers.isSelected());
        testDataList.setEnabled(copyFromOthers.isSelected());
        copyGlobalData.setEnabled(copyFromOthers.isSelected());
        if (copyFromOthers.isSelected()) {
            environments.setModel(new DefaultComboBoxModel(tdProxy.getListOfEnvironements().toArray()));
            loadTestDataLists();
        }
    }//GEN-LAST:event_copyFromOthersItemStateChanged

    private void environmentsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_environmentsItemStateChanged
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            loadTestDataLists();
        }
    }//GEN-LAST:event_environmentsItemStateChanged

    private void loadTestDataLists() {
        DefaultListModel dfM = (DefaultListModel) testDataList.getModel();
        dfM.clear();
        List<String> values = tdProxy.getListOfTestDatas(environments.getSelectedItem().toString());
        values.stream().forEach((value) -> {
            dfM.addElement(value);
        });
    }

    private void createNewEnvironment() {
        if (!getEnvironmentName().trim().isEmpty()) {
            if (copyFromOthers.isSelected()) {
                if (tdProxy.addNewEnvironment(getEnvironmentName(),
                        environments.getSelectedItem().toString(),
                        testDataList.getSelectedValuesList(),
                        copyGlobalData.isSelected())) {
                    environments.addItem(getEnvironmentName());
                    copyFromOthers.setSelected(false);
                }

            } else {
                tdProxy.addNewEnvironment(getEnvironmentName(), null, null, false);
            }
        }
    }

    private String getEnvironmentName() {
        return envName.getText();
    }

    public void selectTextBox() {
        envName.selectAll();
        envName.requestFocusInWindow();
    }

    public void reset() {
        copyFromOthers.setSelected(false);
        testDataList.setModel(new DefaultListModel());
        environments.removeAllItems();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox copyFromOthers;
    private javax.swing.JCheckBox copyGlobalData;
    private javax.swing.JButton createEnv;
    private javax.swing.JTextField envName;
    private javax.swing.JComboBox environments;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList testDataList;
    // End of variables declaration//GEN-END:variables

}
