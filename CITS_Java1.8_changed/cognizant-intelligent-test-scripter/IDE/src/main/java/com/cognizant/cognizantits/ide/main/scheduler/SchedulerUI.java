/*
 * Copyright 2014 - 2017 Cognizant Technology Solutions
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.cognizant.cognizantits.ide.main.scheduler;

import com.cognizant.cognizantits.datalib.component.Project;
import com.cognizant.cognizantits.datalib.component.Release;
import com.cognizant.cognizantits.ide.main.help.Help;
import com.cognizant.cognizantits.ide.main.utils.Utils;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;
import javax.swing.SwingUtilities;
import javax.swing.Timer;

/**
 *
 * 
 */
public class SchedulerUI extends javax.swing.JDialog {

    private static final String SCHEDULER_ARG = " -run -project_location \\\"<PATH>\\\" "
            + "-release \\\"<RELEASE>\\\" "
            + "-testset \\\"<TESTSET>\\\"  ";
    Timer createdTimer;
    Project sProject;
    WinScheduler winScheduler;

    public SchedulerUI() {
        initComponents();
        init();
    }

    private void init() {
        winScheduler = new WinScheduler();
        createdTimer = new Timer(3000, (ActionEvent event) -> {
            created.setVisible(false);
        });
        setIconImage(Utils.getFavIcon());
        setGlassPane(statusPanel);
        initDateModel();
        created.setVisible(false);
    }

    private void initDateModel() {
        SpinnerDateModel dmodel = new SpinnerDateModel();
        dateSpinner.setModel(dmodel);
        dateSpinner.setEditor(new JSpinner.DateEditor(dateSpinner, "MMM - dd - yyyy"));

        SpinnerDateModel tmodel = new SpinnerDateModel();
        timeSpinner.setModel(tmodel);
        timeSpinner.setEditor(new JSpinner.DateEditor(timeSpinner, "HH:mm"));
    }

    /**
     * @return the FULL_DATE_FORMAT
     */
    public static SimpleDateFormat getFULL_DATE_FORMAT() {
        return new SimpleDateFormat("MM/dd/yyyy HH:mm");
    }

    /**
     * @return the DATE_FORMAT
     */
    public static SimpleDateFormat getDATE_FORMAT() {
        return new SimpleDateFormat("MM/dd/yyyy");
    }

    /**
     * @return the TIME_FORMAT
     */
    public static SimpleDateFormat getTIME_FORMAT() {
        return new SimpleDateFormat("HH:mm");
    }

    public void showScheduler(Project sProject) {
        this.sProject = sProject;
        loadReleases();
        setLocationRelativeTo(null);
        setVisible(true);
        dateSpinner.setValue(new Date());
        timeSpinner.setValue(new Date());
    }

    private void loadReleases() {
        releaseCombo.removeAllItems();
        testSetCombo.removeAllItems();
        releaseCombo.setModel(new DefaultComboBoxModel(sProject.getReleases().toArray()));
        releaseCombo.setSelectedIndex(-1);
        if (releaseCombo.getModel().getSize() > 0) {
            releaseCombo.setSelectedIndex(0);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        statusPanel = new javax.swing.JPanel();
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(50, 0), new java.awt.Dimension(50, 0), new java.awt.Dimension(50, 32767));
        filler6 = new javax.swing.Box.Filler(new java.awt.Dimension(50, 0), new java.awt.Dimension(50, 0), new java.awt.Dimension(50, 32767));
        filler7 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 50), new java.awt.Dimension(0, 50), new java.awt.Dimension(32767, 50));
        filler8 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 35), new java.awt.Dimension(0, 35), new java.awt.Dimension(32767, 35));
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        statusArea = new javax.swing.JTextArea();
        optionPanel = new javax.swing.JPanel();
        yesButton = new javax.swing.JButton();
        noButton = new javax.swing.JButton();
        dateSpinner = new javax.swing.JSpinner();
        taskName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        error = new javax.swing.JLabel();
        createTask = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        timeSpinner = new javax.swing.JSpinner();
        releaseCombo = new javax.swing.JComboBox<>();
        testSetCombo = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        created = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        addnlArguments = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();

        statusPanel.setBackground(new Color(0,0,0,.5f));
        statusPanel.setLayout(new java.awt.BorderLayout());

        filler5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                filler5MouseClicked(evt);
            }
        });
        statusPanel.add(filler5, java.awt.BorderLayout.LINE_START);

        filler6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                filler6MouseClicked(evt);
            }
        });
        statusPanel.add(filler6, java.awt.BorderLayout.LINE_END);

        filler7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                filler7MouseClicked(evt);
            }
        });
        statusPanel.add(filler7, java.awt.BorderLayout.PAGE_START);

        filler8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                filler8MouseClicked(evt);
            }
        });
        statusPanel.add(filler8, java.awt.BorderLayout.PAGE_END);

        jPanel1.setLayout(new java.awt.BorderLayout());

        statusArea.setEditable(false);
        statusArea.setColumns(20);
        statusArea.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        statusArea.setForeground(new java.awt.Color(153, 0, 0));
        statusArea.setLineWrap(true);
        statusArea.setRows(5);
        statusArea.setWrapStyleWord(true);
        jScrollPane2.setViewportView(statusArea);

        jPanel1.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        yesButton.setText("Yes");
        yesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yesButtonActionPerformed(evt);
            }
        });
        optionPanel.add(yesButton);

        noButton.setText("No");
        noButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noButtonActionPerformed(evt);
            }
        });
        optionPanel.add(noButton);

        jPanel1.add(optionPanel, java.awt.BorderLayout.SOUTH);

        statusPanel.add(jPanel1, java.awt.BorderLayout.CENTER);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Scheduler");
        setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);

        taskName.setText("New Task");

        jLabel1.setText("TaskName");

        jLabel2.setText("Date");

        error.setText("   ");

        createTask.setText("Create Task");
        createTask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createTaskActionPerformed(evt);
            }
        });

        jLabel3.setText("Time");

        releaseCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                releaseComboItemStateChanged(evt);
            }
        });

        jLabel4.setText("Release");

        jLabel5.setText("TestSet");

        created.setForeground(java.awt.Color.blue);
        created.setText("Task Created Successfully");

        addnlArguments.setColumns(20);
        addnlArguments.setRows(5);
        jScrollPane1.setViewportView(addnlArguments);

        jLabel6.setText("Arguments");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(150, 150, 150)
                        .addComponent(createTask))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addComponent(error)
                                .addGap(57, 57, 57)
                                .addComponent(created))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(testSetCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(releaseCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(taskName)
                                    .addComponent(dateSpinner)
                                    .addComponent(timeSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                                    .addComponent(jScrollPane1))))))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(error)
                    .addComponent(created))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(releaseCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(testSetCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(jLabel6))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(taskName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(timeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addComponent(createTask)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void createTaskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createTaskActionPerformed
        if (isConditionMet()) {
            if (isDateValid()) {
                checkForAndTask();
            }
        } else {
            showStatus("Task could not be created.\nInsufficient Data to create a task");
        }
    }//GEN-LAST:event_createTaskActionPerformed

    private void releaseComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_releaseComboItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            testSetCombo.setModel(new DefaultComboBoxModel(
                    ((Release) releaseCombo.getSelectedItem())
                            .getTestSets().toArray()));
        }
    }//GEN-LAST:event_releaseComboItemStateChanged

    private void filler7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_filler7MouseClicked
        hideStatus();
    }//GEN-LAST:event_filler7MouseClicked

    private void filler5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_filler5MouseClicked
        hideStatus();
    }//GEN-LAST:event_filler5MouseClicked

    private void filler6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_filler6MouseClicked
        hideStatus();
    }//GEN-LAST:event_filler6MouseClicked

    private void filler8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_filler8MouseClicked
        hideStatus();
    }//GEN-LAST:event_filler8MouseClicked

    private void yesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yesButtonActionPerformed
        hideStatus();
        createTask();
    }//GEN-LAST:event_yesButtonActionPerformed

    private void noButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noButtonActionPerformed
        hideStatus();
    }//GEN-LAST:event_noButtonActionPerformed

    private Boolean isConditionMet() {
        return !taskName.getText().trim().isEmpty()
                && releaseCombo.getSelectedIndex() != -1
                && testSetCombo.getSelectedIndex() != -1;
    }

    private Boolean isDateValid() {
        String date = getDATE_FORMAT().format(dateSpinner.getValue())
                + " "
                + getTIME_FORMAT().format(timeSpinner.getValue());
        try {
            if (new Date().before(getFULL_DATE_FORMAT().parse(date))) {
                return true;
            } else {
                showStatus(String.format(
                        "Invalid Schedule Date - [%s].\n"
                        + "Date should be atleast "
                        + "1 min greater than the current date and time", date
                ));
                return false;
            }
        } catch (ParseException ex) {
            Logger.getLogger(SchedulerUI.class.getName()).log(Level.OFF, null, ex);
        }
        return false;
    }

    private void showStatus(String text) {
        statusArea.setText(text);
        getGlassPane().setVisible(true);
        optionPanel.setVisible(false);
    }

    private void showStatusWithButton(String text) {
        showStatus(text);
        optionPanel.setVisible(true);
    }

    private void hideStatus() {
        getGlassPane().setVisible(false);
    }

    private void checkForAndTask() {
        if (winScheduler.isTask(taskName.getText())) {
            showStatusWithButton(String.format("A Task with name [%s] already exist.\nDo you want to overwrite?", taskName.getText()));
        } else {
            createTask();
        }
    }

    private void createTask() {
        SwingUtilities.invokeLater(() -> {
            String argument = SCHEDULER_ARG.replace("<PATH>", sProject.getLocation())
                    .replace("<RELEASE>", releaseCombo.getSelectedItem().toString())
                    .replace("<TESTSET>", testSetCombo.getSelectedItem().toString())
                    .concat(addnlArguments.getText());
            winScheduler.createTask(taskName.getText(),
                    argument,
                    getDATE_FORMAT().format(dateSpinner.getValue()),
                    getTIME_FORMAT().format(timeSpinner.getValue()));
            if (winScheduler.isTask(taskName.getText())) {
                created.setVisible(true);
                createdTimer.start();
            } else {
                showStatus("Could not create task - [" + taskName.getText() + "]");
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea addnlArguments;
    private javax.swing.JButton createTask;
    private javax.swing.JLabel created;
    private javax.swing.JSpinner dateSpinner;
    private javax.swing.JLabel error;
    private javax.swing.Box.Filler filler5;
    private javax.swing.Box.Filler filler6;
    private javax.swing.Box.Filler filler7;
    private javax.swing.Box.Filler filler8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton noButton;
    private javax.swing.JPanel optionPanel;
    private javax.swing.JComboBox<String> releaseCombo;
    private javax.swing.JTextArea statusArea;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JTextField taskName;
    private javax.swing.JComboBox<String> testSetCombo;
    private javax.swing.JSpinner timeSpinner;
    private javax.swing.JButton yesButton;
    // End of variables declaration//GEN-END:variables
}
