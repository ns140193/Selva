/*
 * Copyright 2014 - 2017 Cognizant Technology Solutions
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.cognizant.cognizantits.ide.main.mainui.components;

import com.cognizant.cognizantits.engine.support.DesktopApi;
import com.cognizant.cognizantits.ide.main.mainui.components.testexecution.TestExecution;
import com.cognizant.cognizantits.ide.main.mainui.components.testexecution.tree.model.TestSetNode;
import com.cognizant.cognizantits.ide.main.utils.tree.TreeSelectionRenderer;
import com.cognizant.cognizantits.ide.util.browser.Browser;
import com.cognizant.cognizantits.ide.util.browser.PlatformBrowser;
import java.awt.BorderLayout;
import java.awt.Color;
import java.io.File;
import java.net.URI;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.tree.TreePath;

/**
 *
 *
 */
public class DashBoard extends javax.swing.JPanel {

    private final static String ERR_HTML = "file:///"
            + System.getProperty("user.dir") + File.separator + "Configuration"
            + File.separator + "err.html";

    private Browser browser;
    private String release = "";
    private String testSet = "";

    TestExecution testExecution;

    public DashBoard(TestExecution testExecution) {
        this.testExecution = testExecution;
        initComponents();
        tree.setCellRenderer(testExecution.getTestSetTree().getTree().getCellRenderer());
        TreeSelectionRenderer.installFor(tree);
    }

    public void load() {
        browser = PlatformBrowser.getBrowser();
        webPanel.add(browser.getComponent(), BorderLayout.CENTER);
        browser.load();
    }

    public void loadTree() {
        tree.setModel(testExecution.getTestSetTree().getTree().getModel());
        selectFirstNode();
    }

    String getDetailedSummary() {
        return getPrefix() + File.separator + release + File.separator + testSet
                + File.separator + "Latest"
                + File.separator + "summary.html";
    }

    String getHistory() {
        return getPrefix() + File.separator + release + File.separator + testSet
                + File.separator + "ReportHistory.html";
    }

    void loadPage(Boolean latest) {
        if (browser != null) {
            String url = latest ? getDetailedSummary() : getHistory();
            if (checkFile(url)) {
                browser.setUrl(url);
            } else {
                browser.setUrl(ERR_HTML);
            }
        }
    }

    public void selectFirstNode() {
//        SuperTree.selectFirstLeaf(tree);
    }

    private String getPrefix() {
        return "file:///"
                + testExecution.getProject().getLocation() + File.separator + "Results" + File.separator + "TestExecution";
    }

    public void closeBrowser() {
        browser.quit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        browserPanel = new javax.swing.JPanel();
        webPanel = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        filler6 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
        back = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 32767));
        latestSummary = new javax.swing.JButton();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 32767));
        detailedSummary = new javax.swing.JButton();
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 32767));
        forward = new javax.swing.JButton();
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
        openInbrowser = new javax.swing.JButton();
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        jScrollPane3 = new javax.swing.JScrollPane();
        tree = new javax.swing.JTree();

        setLayout(new java.awt.BorderLayout());

        jSplitPane1.setDividerLocation(200);
        jSplitPane1.setResizeWeight(0.3);

        browserPanel.setLayout(new java.awt.BorderLayout());

        webPanel.setLayout(new java.awt.BorderLayout());
        browserPanel.add(webPanel, java.awt.BorderLayout.CENTER);

        jToolBar1.setBackground(new java.awt.Color(255, 255, 255));
        jToolBar1.setFloatable(false);
        jToolBar1.setForeground(new java.awt.Color(255, 255, 255));
        jToolBar1.setRollover(true);
        jToolBar1.setMaximumSize(new java.awt.Dimension(753, 73));
        jToolBar1.setMinimumSize(new java.awt.Dimension(723, 73));
        jToolBar1.setName(""); // NOI18N
        jToolBar1.setOpaque(true);
        jToolBar1.setPreferredSize(new java.awt.Dimension(723, 73));
        jToolBar1.add(filler6);

        back.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/resources/dashboard/backButton.png"))); // NOI18N
        back.setToolTipText("Navigate Back");
        back.setFocusable(false);
        back.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        back.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });
        jToolBar1.add(back);
        jToolBar1.add(filler1);

        latestSummary.setForeground(new java.awt.Color(255, 255, 255));
        latestSummary.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/resources/dashboard/latest.png"))); // NOI18N
        latestSummary.setBorder(null);
        latestSummary.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        latestSummary.setFocusable(false);
        latestSummary.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        latestSummary.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/resources/dashboard/latestbub.png"))); // NOI18N
        latestSummary.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        latestSummary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                latestSummaryActionPerformed(evt);
            }
        });
        jToolBar1.add(latestSummary);
        jToolBar1.add(filler2);

        detailedSummary.setBackground(Color.decode("#153E7E")
        );
        detailedSummary.setForeground(new java.awt.Color(255, 255, 255));
        detailedSummary.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/resources/dashboard/detailed.png"))); // NOI18N
        detailedSummary.setBorder(null);
        detailedSummary.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        detailedSummary.setFocusable(false);
        detailedSummary.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        detailedSummary.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/resources/dashboard/detailedbub.png"))); // NOI18N
        detailedSummary.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        detailedSummary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detailedSummaryActionPerformed(evt);
            }
        });
        jToolBar1.add(detailedSummary);
        jToolBar1.add(filler3);

        forward.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/resources/dashboard/forwardButton.png"))); // NOI18N
        forward.setToolTipText("Navigate Forward");
        forward.setFocusable(false);
        forward.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        forward.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        forward.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forwardActionPerformed(evt);
            }
        });
        jToolBar1.add(forward);
        jToolBar1.add(filler4);

        openInbrowser.setBackground(new java.awt.Color(255, 255, 255));
        openInbrowser.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/resources/dashboard/browser.png"))); // NOI18N
        openInbrowser.setToolTipText("Open in Browser");
        openInbrowser.setFocusable(false);
        openInbrowser.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openInbrowser.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        openInbrowser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openInbrowserActionPerformed(evt);
            }
        });
        jToolBar1.add(openInbrowser);
        jToolBar1.add(filler5);

        browserPanel.add(jToolBar1, java.awt.BorderLayout.NORTH);

        jSplitPane1.setRightComponent(browserPanel);

        jScrollPane3.setMinimumSize(new java.awt.Dimension(200, 24));
        jScrollPane3.setPreferredSize(new java.awt.Dimension(200, 324));

        tree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                treeValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(tree);

        jSplitPane1.setLeftComponent(jScrollPane3);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void detailedSummaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detailedSummaryActionPerformed
        loadPage(false);
    }//GEN-LAST:event_detailedSummaryActionPerformed

    private void latestSummaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_latestSummaryActionPerformed
        loadPage(true);
    }//GEN-LAST:event_latestSummaryActionPerformed

    private void treeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_treeValueChanged
        TreePath path = tree.getSelectionPath();
        if (path != null) {
            Object sel = path.getLastPathComponent();
            if (sel instanceof TestSetNode) {
                release = ((TestSetNode) sel).getParent().toString();
                testSet = ((TestSetNode) sel).toString();
                latestSummaryActionPerformed(null);
            } else {
                browser.setUrl(ERR_HTML);
            }
        } else {
            browser.setUrl(ERR_HTML);
        }
    }//GEN-LAST:event_treeValueChanged

    private void openInbrowserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openInbrowserActionPerformed
        try {
            String url = browser.getUrl();
            url = url.substring(0, url.indexOf(".html") + 5);
            if (url.endsWith("detailed.html")) {
                url = url.replace("detailed.html", "summary.html");
            }
            if (url.endsWith(".html")) {
                DesktopApi.browse(new URI(url));
            }
        } catch (Exception ex) {
            Logger.getLogger(DashBoard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_openInbrowserActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        browser.back();
    }//GEN-LAST:event_backActionPerformed

    private void forwardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forwardActionPerformed
        browser.next();
    }//GEN-LAST:event_forwardActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back;
    private javax.swing.JPanel browserPanel;
    private javax.swing.JButton detailedSummary;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler4;
    private javax.swing.Box.Filler filler5;
    private javax.swing.Box.Filler filler6;
    private javax.swing.JButton forward;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton latestSummary;
    private javax.swing.JButton openInbrowser;
    private javax.swing.JTree tree;
    private javax.swing.JPanel webPanel;
    // End of variables declaration//GEN-END:variables

    private boolean checkFile(String url) {
        String fadd = url.replace("file:///", "");
        File f = new File(fadd);
        return f.exists() && f.isFile();
    }

}
