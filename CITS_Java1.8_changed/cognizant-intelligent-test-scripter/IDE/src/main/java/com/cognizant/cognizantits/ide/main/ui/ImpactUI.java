/*
 * Copyright 2014 - 2017 Cognizant Technology Solutions
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.cognizant.cognizantits.ide.main.ui;

import com.cognizant.cognizantits.datalib.component.Project;
import com.cognizant.cognizantits.datalib.component.TestCase;
import com.cognizant.cognizantits.datalib.component.TestSet;
import com.cognizant.cognizantits.ide.main.mainui.components.testdesign.TestDesign;
import com.cognizant.cognizantits.ide.main.utils.Utils;
import com.cognizant.cognizantits.ide.util.Notification;
import java.awt.event.WindowEvent;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;

/**
 *
 * 
 */
public class ImpactUI extends javax.swing.JDialog {

    DefaultListModel listModel;

    static ImpactUI impactUI;

    private Project sProject;

    TestDesign testDesign;

    public ImpactUI(TestDesign testDesign) {
        super(new JFrame());
        this.testDesign = testDesign;
        initComponents();
        listModel = new DefaultListModel();
        testCaseList.setModel(listModel);
        setSize(400, 300);
        setIconImage(Utils.getFavIcon());
    }

    public void loadForObject(List<TestCase> testCases, String pageName, String objectName) {
        if (!testCases.isEmpty()) {
            infoLabel.setText("For Object [" + pageName + " - " + objectName + "] : ");
            loadForTestCases(testCases);
        } else {
            Notification.show("No TestCases are Impacted");
        }
    }

    public void loadForTestCase(List<TestCase> testCases, String scenarioName, String testCaseName) {
        if (!testCases.isEmpty()) {
            infoLabel.setText("For TestCase [" + scenarioName + " - " + testCaseName + "] : ");
            loadForTestCases(testCases);
        } else {
            Notification.show("No TestCases are Impacted");
        }
    }

    public void loadForTestData(List<TestCase> testCases, String testdataName) {
        if (!testCases.isEmpty()) {
            infoLabel.setText("For TestData [" + testdataName + "] : ");
            loadForTestCases(testCases);
        } else {
            Notification.show("No TestCases are Impacted");
        }
    }

    private void loadForTestCases(List<TestCase> testCases) {
        listModel.removeAllElements();
        sProject = testCases.get(0).getProject();
        for (TestCase testCase : testCases) {
            listModel.addElement(testCase);
        }
        tcCount.setText(testCases.size() + "");
        setLocationRelativeTo(null);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        testCaseList = new javax.swing.JList<>();
        jToolBar1 = new javax.swing.JToolBar();
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        infoLabel = new javax.swing.JLabel();
        tcCount = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
        selectAll = new javax.swing.JButton();
        clearAll = new javax.swing.JButton();
        jToolBar2 = new javax.swing.JToolBar();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
        createAsTestSet = new javax.swing.JButton();
        close = new javax.swing.JButton();

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Impacted TestCases");
        setAlwaysOnTop(true);
        setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new java.awt.BorderLayout());

        testCaseList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                testCaseListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(testCaseList);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jToolBar1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);
        jToolBar1.add(filler3);

        infoLabel.setText("Impacted TestCases : ");
        jToolBar1.add(infoLabel);

        tcCount.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        tcCount.setForeground(java.awt.Color.blue);
        tcCount.setText("25");
        jToolBar1.add(tcCount);
        jToolBar1.add(filler1);

        selectAll.setText("Select All");
        selectAll.setFocusable(false);
        selectAll.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        selectAll.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        selectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllActionPerformed(evt);
            }
        });
        jToolBar1.add(selectAll);

        clearAll.setText("Clear");
        clearAll.setFocusable(false);
        clearAll.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        clearAll.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        clearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAllActionPerformed(evt);
            }
        });
        jToolBar1.add(clearAll);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.PAGE_START);

        jToolBar2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jToolBar2.setFloatable(false);
        jToolBar2.setRollover(true);
        jToolBar2.add(filler2);

        createAsTestSet.setText("Create as TestSet");
        createAsTestSet.setFocusable(false);
        createAsTestSet.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        createAsTestSet.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        createAsTestSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createAsTestSetActionPerformed(evt);
            }
        });
        jToolBar2.add(createAsTestSet);

        close.setText("Close");
        close.setFocusable(false);
        close.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        close.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeActionPerformed(evt);
            }
        });
        jToolBar2.add(close);

        getContentPane().add(jToolBar2, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeActionPerformed
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_closeActionPerformed

    private void createAsTestSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createAsTestSetActionPerformed
        if (testCaseList.getSelectedIndices().length > 0) {
            sProject.addRelease("ImpactAnalysis");
            sProject.getReleaseByName("ImpactAnalysis").addTestSet("ImpactedTestSet");
            TestSet testSet = sProject.getReleaseByName("ImpactAnalysis").getTestSetByName("ImpactedTestSet");
            for (int index : testCaseList.getSelectedIndices()) {
                if (listModel.size() > index) {
                    TestCase testCase = (TestCase) listModel.get(index);
                    testSet.addNewStep().setTestCase(testCase.getName())
                            .setTestScenario(testCase.getScenario().getName())
                            .setBrowser(testDesign.getDefaultBrowser());
                }
            }
            testDesign.getsMainFrame().getTestExecution().getTestSetTree().getModel().addTestSet(testSet);
            Notification.show("TestSet ImpactAnalysis:ImpactedTestSet created");
        } else {
            Notification.show("Please Select atleast one TestCase from the list");
        }
    }//GEN-LAST:event_createAsTestSetActionPerformed

    private void selectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllActionPerformed
        testCaseList.setSelectionInterval(0, listModel.getSize());
    }//GEN-LAST:event_selectAllActionPerformed

    private void clearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAllActionPerformed
        testCaseList.clearSelection();
    }//GEN-LAST:event_clearAllActionPerformed

    private void testCaseListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_testCaseListMouseClicked
        if (evt.getClickCount() == 2) {
            int index = testCaseList.locationToIndex(evt.getPoint());
            testDesign.loadTableModelForSelection(listModel.get(index));
        }
    }//GEN-LAST:event_testCaseListMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearAll;
    private javax.swing.JButton close;
    private javax.swing.JButton createAsTestSet;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.JLabel infoLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JButton selectAll;
    private javax.swing.JLabel tcCount;
    private javax.swing.JList<String> testCaseList;
    // End of variables declaration//GEN-END:variables
}
